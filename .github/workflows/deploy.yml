name: Build and publish
on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches: 
      - main
jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    env:
      is-frontend: ${{ matrix.service.path == 'frontend/web-app' }}
    strategy:
      matrix:
        service:
          - name: "davidlihor/auction-svc"
            path: "src/AuctionService"
          - name: "davidlihor/search-svc"
            path: "src/SearchService"
          - name: "davidlihor/bid-svc"
            path: "src/BiddingService"
          - name: "davidlihor/gateway-svc"
            path: "src/GatewayService"  
          - name: "davidlihor/notification-svc"
            path: "src/NotificationService"    
          - name: "davidlihor/web-app"
            path: "frontend/web-app"
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 2

    - name: Check Changes
      id: changes
      uses: ./.github/actions/check-changes
      with:
        path: ${{ matrix.service.path }}

    - name: Setup Node (frontend)
      if: env.is-frontend == 'true' && steps.changes.outputs.continue == 'true'
      uses: ./.github/actions/setup-node
      with:
        node-version: 20
        lockfile: frontend/web-app/package-lock.json

    - name: Install dependencies (frontend)
      if: env.is-frontend == 'true' && steps.changes.outputs.continue == 'true'
      working-directory: ${{ matrix.service.path }}
      run: npm ci

    - name: Lint (frontend)
      if: env.is-frontend == 'true' && steps.changes.outputs.continue == 'true'
      working-directory: ${{ matrix.service.path }}
      run: npm run lint

    - name: Test (frontend)
      if: env.is-frontend == 'true' && steps.changes.outputs.continue == 'true'
      working-directory: ${{ matrix.service.path }}
      run: npm test

    - name: Setup .NET
      if: env.is-frontend != 'true' && steps.changes.outputs.continue == 'true'
      uses: ./.github/actions/setup-dotnet
      with:
        dotnet-version: '9.0.x'
        csprojfile: '**/*.csproj'

    - name: Restore dependencies (.NET)
      if: env.is-frontend != 'true' && steps.changes.outputs.continue == 'true'
      run: dotnet restore Carsties.sln

    - name: Format (.NET)
      if: env.is-frontend != 'true' && steps.changes.outputs.continue == 'true'
      run: dotnet format --verify-no-changes
    
    - name: Run Tests (.NET)
      if: env.is-frontend != 'true' && steps.changes.outputs.continue == 'true'
      run: |
        dotnet test Carsties.sln --filter Category=Unit
        dotnet test Carsties.sln --filter Category=Integration

  quality-and-security:
    runs-on: ubuntu-latest
    needs: lint-and-test
    env:
      is-frontend: ${{ matrix.service.path == 'frontend/web-app' }}
    strategy:
      matrix:
        service:
          - name: "davidlihor_Carsties_AuctionService"
            path: "src/AuctionService"
            unit-test: "tests/AuctionService.UnitTests"
            intg-test: "tests/AuctionService.IntegrationTests"
          - name: "davidlihor_Carsties_SearchService"
            path: "src/SearchService"
            intg-test: "tests/SearchService.IntegrationTests"
          - name: "davidlihor_Carsties_BiddingService"
            path: "src/BiddingService"
          - name: "davidlihor_Carsties_GatewayService"
            path: "src/GatewayService"  
          - name: "davidlihor_Carsties_NotificationService"
            path: "src/NotificationService"    
          - name: "davidlihor_Carsties_WebApp"
            path: "frontend/web-app"

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 2

    - name: Check Changes
      id: changes
      uses: ./.github/actions/check-changes
      with:
        path: ${{ matrix.service.path }}

    - name: Setup Node (frontend)
      if: env.is-frontend == 'true' && steps.changes.outputs.continue == 'true'
      uses: ./.github/actions/setup-node
      with:
        node-version: 20
        lockfile: frontend/web-app/package-lock.json

    - name: Setup .NET
      if: env.is-frontend != 'true' && steps.changes.outputs.continue == 'true'
      uses: ./.github/actions/setup-dotnet
      with:
        dotnet-version: '9.0.x'
        csprojfile: '**/*.csproj'

    - name: Restore dependencies (.NET)
      if: env.is-frontend != 'true' && steps.changes.outputs.continue == 'true'
      run: dotnet restore Carsties.sln

    - name: Install SonarScanner & ReportGenerator for .NET 
      if: env.is-frontend != 'true' && steps.changes.outputs.continue == 'true'
      run: |
        dotnet tool install --global dotnet-sonarscanner
        dotnet tool install --global dotnet-reportgenerator-globaltool

    - name: Begin SonarQube analysis
      if: env.is-frontend != 'true' && steps.changes.outputs.continue == 'true'
      run: |
        dotnet sonarscanner begin \
          /k:"${{ matrix.service.name }}" \
          /o:"${{ secrets.SONAR_ORGANIZATION }}" \
          /d:sonar.host.url="${{ secrets.SONAR_URL }}" \
          /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
          /d:sonar.sources="${{ matrix.service.path }}" \
          /d:sonar.exclusions="**/bin/**,**/obj/**" \
          /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" \
          /d:sonar.cs.vstest.reportsPaths="**/TestResults/*.trx"

    - name: Build service
      if: env.is-frontend != 'true' && steps.changes.outputs.continue == 'true'
      run: dotnet build ${{ matrix.service.path }}/*.csproj

    - name: Run unit tests (if defined)
      if: matrix.service.unit-test != '' && steps.changes.outputs.continue == 'true'
      run: dotnet test ${{ matrix.service.unit-test }}/*.csproj --collect:"XPlat Code Coverage" --logger trx

    - name: Run integration tests (if defined)
      if: matrix.service.intg-test != '' && steps.changes.outputs.continue == 'true'
      run: dotnet test ${{ matrix.service.intg-test }}/*.csproj --collect:"XPlat Code Coverage" --logger trx

    - name: Convert coverage to OpenCover
      if: env.is-frontend != 'true' && steps.changes.outputs.continue == 'true'
      run: |
        reportgenerator \
          -reports:**/coverage.cobertura.xml \
          -targetdir:coverage \
          -reporttypes:opencover

    - name: End SonarQube analysis
      if: env.is-frontend != 'true' && steps.changes.outputs.continue == 'true'
      run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

    - name: SonarCloud Scan (frontend)
      if: env.is-frontend == 'true' && steps.changes.outputs.continue == 'true'
      uses: SonarSource/sonarqube-scan-action@v6
      with:
        projectBaseDir: frontend/web-app
        args: >
          -Dsonar.projectKey=${{ matrix.service.name }}
          -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
          -Dsonar.sources=src
          -Dsonar.branch.name=main
          -Dsonar.exclusions=**/node_modules/**
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_URL }}

    - name: npm audit (SCA)
      if: env.is-frontend == 'true' && steps.changes.outputs.continue == 'true'
      run: npm audit --audit-level=high --prefix frontend/web-app

    - name: Check vulnerable .NET packages
      if: env.is-frontend != 'true' && steps.changes.outputs.continue == 'true'
      run: dotnet list Carsties.sln package --vulnerable

    - name: Install Gitleaks
      if: steps.changes.outputs.continue == 'true'
      uses: ./.github/actions/setup-gitleaks
      with:
        version: "8.20.1"

    - name: Run Gitleaks (safe print)
      if: steps.changes.outputs.continue == 'true'
      run: |
        gitleaks detect \
          --source . \
          --report-format=json \
          --report-path=gitleaks-report.json \
          --exit-code 0 \
          --redact=100 \
          --no-git \
          --config=.gitleaks.toml

        if grep -q '"RuleID"' gitleaks-report.json; then
          echo "Gitleaks found potential leaks:"
          jq '.[] | {RuleID, File, StartLine}' gitleaks-report.json
          exit 1
        else
          echo "No leaks found"
        fi

  build-and-push:
    runs-on: ubuntu-latest
    needs: quality-and-security
    strategy:
      matrix:
        service:
          - name: "davidlihor/auction-svc"
            path: "src/AuctionService"
          - name: "davidlihor/search-svc"
            path: "src/SearchService"
          - name: "davidlihor/bid-svc"
            path: "src/BiddingService"
          - name: "davidlihor/gateway-svc"
            path: "src/GatewayService"  
          - name: "davidlihor/notification-svc"
            path: "src/NotificationService"    
          - name: "davidlihor/web-app"
            path: "frontend/web-app"          

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 2

    - name: Check Changes
      id: changes
      uses: ./.github/actions/check-changes
      with:
        path: ${{ matrix.service.path }}
    
    - name: Set up Docker buildx
      if: steps.changes.outputs.continue == 'true'
      uses: docker/setup-buildx-action@v2
    
    - name: Login
      if: steps.changes.outputs.continue == 'true'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
    
    - name: Build docker image
      if: steps.changes.outputs.continue == 'true'
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ${{matrix.service.path}}/Dockerfile
        push: false
        load: true
        tags: |
            ${{matrix.service.name}}:candidate

    - name: Run Trivy vulnerability scanner
      if: steps.changes.outputs.continue == 'true'
      uses: aquasecurity/trivy-action@0.20.0
      with:
        image-ref: ${{ matrix.service.name }}:candidate
        format: 'table'
        exit-code: '1'
        vuln-type: 'os,library'
        severity: 'CRITICAL'
    
    - name: Push docker image
      if: steps.changes.outputs.continue == 'true'
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ${{matrix.service.path}}/Dockerfile
        push: true
        tags: |
          ${{matrix.service.name}}:latest
          ${{ matrix.service.name }}:gh-${{ github.sha }}